0. There are two methods for building a heap from an unsorted array:
   (1) insert each element into the heap  --- O(nlogn) -- heapq.heappush()
   (2) heapify (top-down)                 --- O(n)     -- heapq.heapify()

   (a) Derive these time complexities.
   (b) Use a long list of random numbers to show the difference in time. (Hint: random.shuffle or random.sample)
   (c) What about sorted or reversely-sorted numbers?


1. Given two lists A and B, each with n integers, return
   a sorted list C that contains the smallest n elements from AxB:

     AxB = { (x, y) | x in A, y in B }

 Q: What are the time complexities of these algorithms? 
   (a) enumerate all n^2 pairs, sort, and take top n.
   --> O(n^3)
   (b) enumerate all n^2 pairs, but use qselect from hw1.
   --> O(n^2)
   (c) Dijkstra-style best-first, only enumerate O(n) (at most 2n) pairs.
   --> O(nlogn)     



2. k-way mergesort (the classical mergesort is a special case where k=2).

   Q: What is the complexity? Write down the detailed analysis in report.txt.
   --> O(n*k^2)

3. [WILL BE GRADED]
   
   Find the k smallest numbers in a data stream of length n (k<<n),
   using only O(k) space (the stream itself might be too big to fit in memory).

   Q: What is your complexity? Write down the detailed analysis in report.txt.
   --> T(n) = n + 2*T(n/2) ==> T(n) \in O(n*log(n)) 


Debriefing (required!): --------------------------

0. What's your name?
--> Disha Kanavikar

1. Approximately how many hours did you spend on this assignment?
--> 10 hours

2. Would you rate it as easy, moderate, or difficult?
--> difficult

3. Did you work on it mostly alone, or mostly with other people?
   Note you are encouraged to discuss with your classmates, 
   but each students should submit his/her own code.
--> mostly alone

4. How deeply do you feel you understand the material it covers (0%-100%)?
--> 70%

5. Which part(s) of the course you like the most so far?
--> sorting

6. Which part(s) of the course you dislike the most so far?
--> time complexities